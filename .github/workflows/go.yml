name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TEST_SECRET: ${{ secrets.TEST_SECRET }}

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows, linux]
        arch: [amd64, 386, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -v -o myapp-${{ matrix.os }}-${{ matrix.arch }} ./main.go
      env:
        CGO_ENABLED: 0

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.3
      with:
        name: myapp-${{ matrix.os }}-${{ matrix.arch }}
        path: myapp-${{ matrix.os }}-${{ matrix.arch }}

    - name: Run
      if: matrix.os == 'linux' && matrix.arch == 'amd64'
      run: |
        chmod +x ./myapp-${{ matrix.os }}-${{ matrix.arch }}
        ./myapp-${{ matrix.os }}-${{ matrix.arch }}
      env:
        TEST_SECRET: ${{ env.TEST_SECRET }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: List contents of artifacts
        run: ls -R ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_id }}
          release_name: Release ${{ github.run_id }}
          draft: false
          prerelease: false

      - name: Upload Release Asset for Linux 386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/myapp-linux-386/myapp-linux-386
          asset_name: myapp-linux-386
          asset_content_type: application/octet-stream

      - name: Upload Release Asset for Linux amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/myapp-linux-amd64/myapp-linux-amd64
          asset_name: myapp-linux-amd64
          asset_content_type: application/octet-stream
  
      - name: Upload Release Asset for Linux arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/myapp-linux-arm64/myapp-linux-arm64
          asset_name: myapp-linux-arm64
          asset_content_type: application/octet-stream
  
      - name: Upload Release Asset for Windows 386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/myapp-windows-386/myapp-windows-386
          asset_name: myapp-windows-386
          asset_content_type: application/octet-stream
  
      - name: Upload Release Asset for Windows amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/myapp-windows-amd64/myapp-windows-amd64
          asset_name: myapp-windows-amd64
          asset_content_type: application/octet-stream